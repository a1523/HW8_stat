# Задача 1
# Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks):
# zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
# ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
# Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с помощью функции cov из numpy
# Полученные значения должны быть равны.
# Найдите коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных отклонений двух признаков, 
# а затем с использованием функций из библиотек numpy и pandas.

import numpy as np
import pandas as pd
from statsmodels.stats.weightstats import _tconfint_generic as t_stat

zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array( [401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

M_X = zp.mean()
M_Y = ks.mean()
M_XY = (zp * ks).mean()

cov_ks = M_XY - M_X * M_Y
# cov_ks = 9157.839999999997

np.cov(zp, ks, ddof = 0)
# array([[ 3494.64,  9157.84],
#        [ 9157.84, 30468.89]])

cov_ks2 = ((zp - zp.mean()) * (ks - ks.mean())).mean()
# cov_ks2 = 9157.84

std_X = zp.std()
std_Y = ks.std()

corr_ks = cov_ks / (std_X * std_Y)
# corr_ks = 0.8874900920739158

np.corrcoef(zp, ks)
# array([[1.        , 0.88749009],
#        [0.88749009, 1.        ]])

# Задача 2
# Измерены значения IQ выборки студентов, обучающихся в местных технических вузах:
# 131, 125, 115, 122, 131, 115, 107, 99, 125, 111.
# Известно, что в генеральной совокупности IQ распределен нормально.
# Найдите доверительный интервал для математического ожидания с надежностью 0.95.

x = np.array([131, 125, 115, 122, 131, 115, 107, 99, 125, 111])
x_mean = x.mean()
x_std = x.std(ddof = 1)
x_mean_std = x_std / (np.sqrt(len(X)))

t_stat(x_mean, x_mean_std, len(X) - 1, 0.05, 'two-sided')
# t_stat = (110.55608365158724, 125.64391634841274)

# Задача 3 
# Известно, что рост футболистов в сборной распределен нормально с дисперсией генеральной совокупности, 
# равной 25 кв.см. Объем выборки равен 27, среднее выборочное составляет 174.2. Найдите доверительный 
# интервал для математического ожидания с надежностью 0.95.

x_mean = 174.2
x_std = np.sqrt(25)
x_mean_std = x_std / np.sqrt(27)

t_stat(x_mean, x_mean_std, 27 - 1, 0.05, 'two-sided')
# t_stat = (172.2220658754539, 176.17793412454608)